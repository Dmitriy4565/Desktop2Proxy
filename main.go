package main

import (
	"bufio"
	"desktop2proxy/models"
	"desktop2proxy/scanners"
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"strings"
)

func main() {
	showWelcome()

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
	target := getTargetInfo()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	runScanAndAutoConnect(target)
}

func showWelcome() {
	fmt.Println("üéØ =================================")
	fmt.Println("üéØ    Desktop2Proxy Linux Auto Connect")
	fmt.Println("üéØ =================================")
	fmt.Println()
}

func getTargetInfo() models.Target {
	fmt.Print("üéØ –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å: ")
	ip := readInput()

	fmt.Print("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
	user := readInput()

	fmt.Print("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
	pass := readInput()

	return models.Target{
		IP:       strings.TrimSpace(ip),
		Username: strings.TrimSpace(user),
		Password: strings.TrimSpace(pass),
	}
}

func readInput() string {
	scanner := bufio.NewScanner(os.Stdin)
	if scanner.Scan() {
		return scanner.Text()
	}
	return ""
}

func runScanAndAutoConnect(target models.Target) {
	if target.IP == "" {
		fmt.Println("‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
	}

	fmt.Printf("\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Ö–æ—Å—Ç %s...\n", target.IP)
	if target.Username != "" {
		fmt.Printf("üë§ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è credentials: %s/%s\n", target.Username, "***")
	}

	manager := scanners.NewScannerManager()
	allScanners := manager.GetAllScanners()

	fmt.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")

	results := scanners.ProbeAllProtocols(target, allScanners)

	if len(results) == 0 {
		fmt.Println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
		bufio.NewReader(os.Stdin).ReadBytes('\n')
		return
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	bestProtocol := selectBestProtocol(results)
	fmt.Printf("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª: %s\n", bestProtocol.Protocol)

	// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	autoConnectToProtocol(target, bestProtocol)
}

func selectBestProtocol(results []models.ProbeResult) models.ProbeResult {
	// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è Linux
	priority := map[string]int{
		"SSH":         100, // –õ—É—á—à–∏–π - –Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å
		"Telnet":      90,  // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
		"VNC":         80,  // –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π Linux
		"RDP":         70,  // –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π Windows
		"HTTP":        60,  // –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
		"HTTPS":       60,
		"WinRM-HTTP":  50, // Windows management
		"WinRM-HTTPS": 50,
	}

	var bestResult models.ProbeResult
	bestScore := -1

	for _, result := range results {
		score := priority[result.Protocol]
		if score > bestScore {
			bestScore = score
			bestResult = result
		}
	}

	return bestResult
}

func autoConnectToProtocol(target models.Target, result models.ProbeResult) {
	fmt.Printf("\nüöÄ –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s://%s:%d...\n", result.Protocol, target.IP, result.Port)
	fmt.Println("‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")

	switch result.Protocol {
	case "SSH":
		startSSHAutoConnect(target, result.Port)
	case "Telnet":
		startTelnetAutoConnect(target, result.Port)
	case "HTTP", "HTTPS":
		openBrowserAuto(target, result)
	case "RDP":
		startRDPAutoConnect(target, result.Port)
	case "VNC":
		startVNCAutoConnect(target, result.Port)
	case "WinRM-HTTP", "WinRM-HTTPS":
		startWinRMAutoConnect(target, result.Port)
	default:
		fmt.Printf("‚ùå –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è %s –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n", result.Protocol)
		showManualInstructions(target, result)
	}
}

// –†–ï–ê–õ–¨–ù–û–ï SSH –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
func startSSHAutoConnect(target models.Target, port int) {
	fmt.Printf("üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSH %s@%s:%d...\n", target.Username, target.IP, port)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ SSH
	if !commandExists("ssh") {
		fmt.Println("‚ùå SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install openssh-client")
		waitForExit()
		return
	}

	// –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É SSH
	sshArgs := []string{
		fmt.Sprintf("%s@%s", target.Username, target.IP),
		"-p", strconv.Itoa(port),
		"-o", "StrictHostKeyChecking=no",
		"-o", "UserKnownHostsFile=/dev/null",
	}

	// –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ –Ω–µ–≥–æ
	if target.Password == "" {
		sshArgs = append(sshArgs, "-o", "BatchMode=yes")
	}

	fmt.Println("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º SSH —Å–µ—Å—Å–∏—é...")
	fmt.Println("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+D –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit'")

	cmd := exec.Command("ssh", sshArgs...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ SSH: %v\n", err)
		if target.Password != "" {
			fmt.Println("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
		}
	}
}

// –†–ï–ê–õ–¨–ù–û–ï TELNET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
func startTelnetAutoConnect(target models.Target, port int) {
	fmt.Printf("üìü –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telnet %s:%d...\n", target.IP, port)

	if !commandExists("telnet") {
		fmt.Println("‚ùå Telnet –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install telnet")
		waitForExit()
		return
	}

	fmt.Println("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Telnet —Å–µ—Å—Å–∏—é...")
	fmt.Println("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+] –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ 'quit'")

	cmd := exec.Command("telnet", target.IP, strconv.Itoa(port))
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ Telnet: %v\n", err)
	}
}

// –†–ï–ê–õ–¨–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –ë–†–ê–£–ó–ï–†–ê
func openBrowserAuto(target models.Target, result models.ProbeResult) {
	scheme := "http"
	if result.Protocol == "HTTPS" {
		scheme = "https"
	}
	url := fmt.Sprintf("%s://%s:%d", scheme, target.IP, result.Port)

	fmt.Printf("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä: %s\n", url)

	var cmd *exec.Cmd

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
	if commandExists("xdg-open") {
		cmd = exec.Command("xdg-open", url)
	} else if commandExists("firefox") {
		cmd = exec.Command("firefox", url)
	} else if commandExists("chromium-browser") {
		cmd = exec.Command("chromium-browser", url)
	} else if commandExists("google-chrome") {
		cmd = exec.Command("google-chrome", url)
	} else {
		fmt.Printf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä. –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: %s\n", url)
		waitForExit()
		return
	}

	if err := cmd.Start(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: %v\n", err)
		fmt.Printf("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: %s\n", url)
	} else {
		fmt.Println("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
	}

	waitForExit()
}

// RDP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ß–µ—Ä–µ–∑ Remmina
func startRDPAutoConnect(target models.Target, port int) {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	if !commandExists("remmina") {
		fmt.Println("‚ùå Remmina –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install remmina")
		waitForExit()
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Remmina
	profileContent := fmt.Sprintf(`[remmina]
name=%s
protocol=RDP
server=%s
port=%d
username=%s
password=%s
`, target.IP, target.IP, port, target.Username, target.Password)

	profileFile := "/tmp/remmina_temp.remmina"
	if err := os.WriteFile(profileFile, []byte(profileContent), 0644); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v\n", err)
		waitForExit()
		return
	}
	defer os.Remove(profileFile)

	fmt.Println("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Remmina...")
	cmd := exec.Command("remmina", "-c", profileFile)
	if err := cmd.Start(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Remmina: %v\n", err)
	} else {
		fmt.Println("‚úÖ RDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}

	waitForExit()
}

// VNC –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
func startVNCAutoConnect(target models.Target, port int) {
	fmt.Printf("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VNC %s:%d...\n", target.IP, port)

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ VNC –∫–ª–∏–µ–Ω—Ç—ã
	var cmd *exec.Cmd

	if commandExists("vinagre") {
		vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
		if target.Password != "" {
			vncUrl = fmt.Sprintf("vnc://%s@%s:%d", target.Password, target.IP, port)
		}
		cmd = exec.Command("vinagre", vncUrl)
	} else if commandExists("remmina") {
		vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
		cmd = exec.Command("remmina", "-c", vncUrl)
	} else {
		fmt.Println("‚ùå VNC –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install vinagre")
		waitForExit()
		return
	}

	fmt.Println("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º VNC –∫–ª–∏–µ–Ω—Ç...")
	if err := cmd.Start(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VNC: %v\n", err)
	} else {
		fmt.Println("‚úÖ VNC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}

	waitForExit()
}

// WinRM –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï (—á–µ—Ä–µ–∑ wine –∏–ª–∏ native go)
func startWinRMAutoConnect(target models.Target, port int) {
	fmt.Printf("ü™ü –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WinRM %s:%d...\n", target.IP, port)
	fmt.Println("üí° WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
	fmt.Printf("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: winrs -r:https://%s:%d -u:%s -p:%s\n",
		target.IP, port, target.Username, target.Password)
	waitForExit()
}

// –£–¢–ò–õ–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
func commandExists(cmd string) bool {
	_, err := exec.LookPath(cmd)
	return err == nil
}

func showManualInstructions(target models.Target, result models.ProbeResult) {
	fmt.Printf("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n")
	fmt.Printf("–ü—Ä–æ—Ç–æ–∫–æ–ª: %s\n", result.Protocol)
	fmt.Printf("–ê–¥—Ä–µ—Å: %s:%d\n", target.IP, result.Port)
	if target.Username != "" {
		fmt.Printf("–õ–æ–≥–∏–Ω: %s\n", target.Username)
	}
	if target.Password != "" {
		fmt.Printf("–ü–∞—Ä–æ–ª—å: %s\n", target.Password)
	}
	waitForExit()
}

func waitForExit() {
	fmt.Println("\n‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
	bufio.NewReader(os.Stdin).ReadBytes('\n')
}
