package main

import (
	"bufio"
	"desktop2proxy/models"
	"desktop2proxy/scanners"
	"fmt"
	"os"
	"strings"
)

func main() {
	targetIP := getInput("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ")
	username := getInput("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	password := getInput("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

	target := models.Target{
		IP:       strings.TrimSpace(targetIP),
		Username: strings.TrimSpace(username),
		Password: strings.TrimSpace(password),
	}

	if target.IP == "" {
		fmt.Println("‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
	}

	fmt.Printf("\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Ö–æ—Å—Ç %s...\n", target.IP)
	if target.Username != "" {
		fmt.Printf("üë§ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è credentials: %s/%s\n", target.Username, "***")
	}
	fmt.Println()

	manager := scanners.NewScannerManager()
	allScanners := manager.GetAllScanners()

	fmt.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")

	results := scanners.ProbeAllProtocols(target, allScanners)

	if len(results) > 0 {
		fmt.Printf("\nüéØ –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d\n\n", len(results))
		for i, result := range results {
			fmt.Printf("%d. –ü—Ä–æ—Ç–æ–∫–æ–ª: %s\n", i+1, result.Protocol)
			fmt.Printf("   –ü–æ—Ä—Ç: %d\n", result.Port)
			fmt.Printf("   –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n")
			if result.Banner != "" {
				fmt.Printf("   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: %s\n", result.Banner)
			}
			fmt.Println()
		}
	} else {
		fmt.Println("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É")
	}

	fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
	bufio.NewReader(os.Stdin).ReadBytes('\n')
}

func getInput(prompt string) string {
	fmt.Print(prompt)
	scanner := bufio.NewScanner(os.Stdin)
	if scanner.Scan() {
		return scanner.Text()
	}
	return ""
}
