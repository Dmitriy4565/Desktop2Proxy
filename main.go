package main

import (
    "context"
    "fmt"
    "log"
    "protocol-scanner/scanner"
)

func main() {
    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    target := Target{
        IP:       "192.168.1.1",
        Username: "admin", 
        Password: "password",
    }

    fmt.Printf("–°–∫–∞–Ω–∏—Ä—É–µ–º —Ö–æ—Å—Ç %s...\n", target.IP)
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–Ω–µ—Ä–æ–≤
    manager := scanner.NewScannerManager()
    scanners := manager.GetAllScanners()
    
    fmt.Printf("–î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–∞–Ω–µ—Ä–æ–≤: %d\n", len(scanners))
    for _, s := range scanners {
        fmt.Printf(" - %s (–ø–æ—Ä—Ç %d)\n", s.GetName(), s.GetDefaultPort())
    }
    
    result := probeProtocols(target, scanners)
    
    if result != nil {
        fmt.Printf("üéØ –£–°–ü–ï–•! –ü—Ä–æ—Ç–æ–∫–æ–ª: %s, –ü–æ—Ä—Ç: %d\n", result.Protocol, result.Port)
        if result.Banner != "" {
            fmt.Printf("   –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: %s\n", result.Banner)
        }
    } else {
        fmt.Println("‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –ø–æ–¥–æ—à–µ–ª")
    }
}

func probeProtocols(target Target, scanners []scanner.Scanner) *ProbeResult {
    ctx, cancel := context.WithCancel(context.Background())
    defer cancel()

    resultChan := make(chan ProbeResult, len(scanners))

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–∫–∞–Ω–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for _, scanner := range scanners {
        go func(s scanner.Scanner) {
            port := s.GetDefaultPort()
            result := s.CheckProtocol(ctx, target, port)
            resultChan <- result
        }(scanner)
    }

    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for range scanners {
        result := <-resultChan
        if result.Success {
            cancel() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return &result
        } else {
            fmt.Printf("‚ùå %s:%d - %s\n", result.Protocol, result.Port, result.Error)
        }
    }

    return nil
}