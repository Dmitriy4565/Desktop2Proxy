package main

import (
	"bufio"
	"desktop2proxy/models"
	"desktop2proxy/scanners"
	"fmt"
	"os"
	"strings"
)

func main() {
	showWelcome()

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
	target := getTargetInfo()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	runScanAndAutoConnect(target)
}

func showWelcome() {
	fmt.Println("üéØ =================================")
	fmt.Println("üéØ    Desktop2Proxy Auto Connect")
	fmt.Println("üéØ =================================")
	fmt.Println()
}

func getTargetInfo() models.Target {
	fmt.Print("üéØ –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å: ")
	ip := readInput()

	fmt.Print("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
	user := readInput()

	fmt.Print("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
	pass := readInput()

	return models.Target{
		IP:       strings.TrimSpace(ip),
		Username: strings.TrimSpace(user),
		Password: strings.TrimSpace(pass),
	}
}

func readInput() string {
	scanner := bufio.NewScanner(os.Stdin)
	if scanner.Scan() {
		return scanner.Text()
	}
	return ""
}

func runScanAndAutoConnect(target models.Target) {
	if target.IP == "" {
		fmt.Println("‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
	}

	fmt.Printf("\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Ö–æ—Å—Ç %s...\n", target.IP)
	if target.Username != "" {
		fmt.Printf("üë§ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è credentials: %s/%s\n", target.Username, "***")
	}

	manager := scanners.NewScannerManager()
	allScanners := manager.GetAllScanners()

	fmt.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")

	results := scanners.ProbeAllProtocols(target, allScanners)

	if len(results) == 0 {
		fmt.Println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
		bufio.NewReader(os.Stdin).ReadBytes('\n')
		return
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	bestProtocol := selectBestProtocol(results)
	fmt.Printf("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª: %s\n", bestProtocol.Protocol)

	// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	autoConnectToProtocol(target, bestProtocol)
}

func selectBestProtocol(results []models.ProbeResult) models.ProbeResult {
	// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	priority := map[string]int{
		"SSH":         100,
		"WinRM-HTTP":  90,
		"WinRM-HTTPS": 90,
		"Telnet":      80,
		"HTTP":        70,
		"HTTPS":       70,
		"RDP":         60,
		"VNC":         50,
	}

	var bestResult models.ProbeResult
	bestScore := -1

	for _, result := range results {
		score := priority[result.Protocol]
		if score > bestScore {
			bestScore = score
			bestResult = result
		}
	}

	return bestResult
}

func autoConnectToProtocol(target models.Target, result models.ProbeResult) {
	fmt.Printf("\nüöÄ –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s://%s:%d...\n", result.Protocol, target.IP, result.Port)
	fmt.Println("‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")

	switch result.Protocol {
	case "SSH":
		startSSHAutoConnect(target, result.Port)
	case "WinRM-HTTP", "WinRM-HTTPS":
		startWinRMAutoConnect(target, result.Port)
	case "Telnet":
		startTelnetAutoConnect(target, result.Port)
	case "HTTP", "HTTPS":
		openBrowserAuto(target, result)
	case "RDP":
		startRDPAutoConnect(target, result.Port)
	case "VNC":
		startVNCAutoConnect(target, result.Port)
	default:
		fmt.Printf("‚ùå –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è %s –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n", result.Protocol)
		showManualInstructions(target, result)
	}
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–≤—Ç–æ-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)
func startSSHAutoConnect(target models.Target, port int) {
	fmt.Println("üîê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
	fmt.Println("üí° SSH –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	fmt.Printf("üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ssh %s@%s -p %d\n",
		target.Username, target.IP, port)
	waitForExit()
}

func startWinRMAutoConnect(target models.Target, port int) {
	fmt.Println("ü™ü –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Windows —á–µ—Ä–µ–∑ WinRM...")
	fmt.Println("üí° WinRM –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	waitForExit()
}

func startTelnetAutoConnect(target models.Target, port int) {
	fmt.Println("üìü –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Telnet...")
	fmt.Println("üí° Telnet –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	fmt.Printf("üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: telnet %s %d\n", target.IP, port)
	waitForExit()
}

func openBrowserAuto(target models.Target, result models.ProbeResult) {
	scheme := "http"
	if result.Protocol == "HTTPS" {
		scheme = "https"
	}
	url := fmt.Sprintf("%s://%s:%d", scheme, target.IP, result.Port)
	fmt.Printf("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä: %s\n", url)

	// –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
	if err := openBrowser(url); err != nil {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n")
		fmt.Printf("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: %s\n", url)
	}
	waitForExit()
}

func startRDPAutoConnect(target models.Target, port int) {
	fmt.Println("üñ•Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º Remote Desktop...")
	fmt.Printf("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RDP:\n")
	fmt.Printf("   –ê–¥—Ä–µ—Å: %s:%d\n", target.IP, port)
	fmt.Printf("   –õ–æ–≥–∏–Ω: %s\n", target.Username)
	fmt.Printf("   –ü–∞—Ä–æ–ª—å: %s\n", target.Password)
	fmt.Println("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'mstsc' –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ")
	waitForExit()
}

func startVNCAutoConnect(target models.Target, port int) {
	fmt.Println("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ VNC...")
	fmt.Printf("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VNC:\n")
	fmt.Printf("   –ê–¥—Ä–µ—Å: %s:%d\n", target.IP, port)
	fmt.Printf("   –ü–∞—Ä–æ–ª—å: %s\n", target.Password)
	waitForExit()
}

func openBrowser(url string) error {
	// –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
	return fmt.Errorf("–∞–≤—Ç–æ-–æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
}

func showManualInstructions(target models.Target, result models.ProbeResult) {
	fmt.Printf("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n")
	fmt.Printf("–ü—Ä–æ—Ç–æ–∫–æ–ª: %s\n", result.Protocol)
	fmt.Printf("–ê–¥—Ä–µ—Å: %s:%d\n", target.IP, result.Port)
	if target.Username != "" {
		fmt.Printf("–õ–æ–≥–∏–Ω: %s\n", target.Username)
	}
	if target.Password != "" {
		fmt.Printf("–ü–∞—Ä–æ–ª—å: %s\n", target.Password)
	}
	waitForExit()
}

func waitForExit() {
	fmt.Println("\n‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
	bufio.NewReader(os.Stdin).ReadBytes('\n')
}
