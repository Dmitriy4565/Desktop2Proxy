package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
)

func ConnectVNC(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VNC %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è - TigerVNC
		if CommandExists("vncviewer") {
			// –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø—Ü–∏–π
			cmd = exec.Command("vncviewer",
				fmt.Sprintf("%s:%d", target.IP, port))
		} else {
			return fmt.Errorf("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TigerVNC –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RDP")
		}

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - TigerVNC —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
		if CommandExists("vncviewer") {
			fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º TigerVNC viewer...")

			// –ë–∞–∑–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã TigerVNC
			args := []string{
				target.IP + ":" + strconv.Itoa(port),
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
			args = append(args,
				"-PreferredEncoding", "Tight", // –ö–æ–¥–∏—Ä–æ–≤–∫–∞
				"-CompressLevel", "6", // –°–∂–∞—Ç–∏–µ
				"-QualityLevel", "9", // –ö–∞—á–µ—Å—Ç–≤–æ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –æ–ø—Ü–∏–∏)
			)

			cmd = exec.Command("vncviewer", args...)

		} else if CommandExists("vinagre") {
			// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - Vinagre
			fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Vinagre...")
			cmd = exec.Command("vinagre",
				"vnc://"+target.IP+":"+strconv.Itoa(port))

		} else if CommandExists("remmina") {
			// Remmina –¥–ª—è VNC
			fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Remmina...")
			cmd = exec.Command("remmina",
				"-c", "vnc://"+target.IP+":"+strconv.Itoa(port))

		} else {
			return fmt.Errorf("‚ùå VNC –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S tigervnc")
		}

	case "darwin":
		// macOS –≤–µ—Ä—Å–∏—è
		if CommandExists("open") {
			// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Screen Sharing
			vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
			cmd = exec.Command("open", vncUrl)
		} else if CommandExists("vncviewer") {
			// TigerVNC –¥–ª—è macOS
			cmd = exec.Command("vncviewer",
				fmt.Sprintf("%s:%d", target.IP, port))
		} else {
			return fmt.Errorf("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Screen Sharing –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TigerVNC")
		}

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º VNC –∫–ª–∏–µ–Ω—Ç...\n")
	fmt.Printf("üîó –ê–¥—Ä–µ—Å: %s:%d\n", target.IP, port)
	if target.Password != "" {
		fmt.Printf("üîë –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω VNC –∫–ª–∏–µ–Ω—Ç–æ–º\n")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ VNC: %v", err)
	}

	fmt.Println("‚úÖ VNC —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ü–∏–π
func ConnectVNCQuick(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VNC %s:%d...\n", target.IP, port)

	if !CommandExists("vncviewer") {
		return fmt.Errorf("‚ùå TigerVNC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ - —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å
	cmd := exec.Command("vncviewer", target.IP+":"+strconv.Itoa(port))
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	fmt.Println("üí° –ó–∞–ø—É—Å–∫–∞–µ–º TigerVNC...")
	return cmd.Run()
}
