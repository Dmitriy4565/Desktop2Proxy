package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os/exec"
	"runtime"
)

func ConnectVNC(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VNC %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// TigerVNC –∏–ª–∏ RealVNC
		cmd = exec.Command("vncviewer",
			fmt.Sprintf("%s:%d", target.IP, port),
			"-password", target.Password)

	case "darwin", "linux":
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º vinagre, remmina –∏–ª–∏ vncviewer
		vncUrl := fmt.Sprintf("vnc://%s@%s:%d", target.Username, target.IP, port)
		if target.Password != "" {
			vncUrl = fmt.Sprintf("vnc://%s:%s@%s:%d", target.Username, target.Password, target.IP, port)
		}

		cmd = exec.Command("vinagre", vncUrl)

	default:
		return fmt.Errorf("VNC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ %s", runtime.GOOS)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º VNC –∫–ª–∏–µ–Ω—Ç...\n")
	if err := cmd.Start(); err != nil {
		// –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
		fmt.Printf("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...\n")
		return startAlternativeVNC(target, port)
	}

	fmt.Println("‚úÖ VNC –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
	return cmd.Wait()
}

func startAlternativeVNC(target models.Target, port int) error {
	var cmd *exec.Cmd

	if runtime.GOOS == "linux" {
		cmd = exec.Command("remmina", "-c", fmt.Sprintf("vnc://%s:%d", target.IP, port))
	} else {
		return fmt.Errorf("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VNC –∫–ª–∏–µ–Ω—Ç (TigerVNC, RealVNC, Vinagre)")
	}

	return cmd.Start()
}
