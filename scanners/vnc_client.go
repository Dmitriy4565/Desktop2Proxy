package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
)

func ConnectVNC(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VNC %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd
	var useRemmina bool

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è
		if commandExists("vncviewer") {
			cmd = exec.Command("vncviewer",
				fmt.Sprintf("%s:%d", target.IP, port),
				"-password", target.Password)
		} else {
			return fmt.Errorf("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VNC –∫–ª–∏–µ–Ω—Ç (TigerVNC, RealVNC)")
		}

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Remmina, –ø–æ—Ç–æ–º Vinagre, –ø–æ—Ç–æ–º vncviewer
		if commandExists("remmina") {
			// Remmina –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏
			profileContent := fmt.Sprintf(`[remmina]
name=AutoVNC_%s
protocol=VNC
server=%s
port=%d
password=%s
colordepth=32
quality=9
`, target.IP, target.IP, port, target.Password)

			profileFile := "/tmp/remmina_vnc.remmina"
			if err := os.WriteFile(profileFile, []byte(profileContent), 0644); err != nil {
				return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è VNC: %v", err)
			}
			defer os.Remove(profileFile)

			cmd = exec.Command("remmina", "-c", profileFile)
			useRemmina = true

		} else if commandExists("vinagre") {
			// Vinagre —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–æ–ª—è –≤ URL
			vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
			if target.Password != "" {
				vncUrl = fmt.Sprintf("vnc://:%s@%s:%d", target.Password, target.IP, port)
			}
			cmd = exec.Command("vinagre", vncUrl)

		} else if commandExists("vncviewer") {
			// TigerVNC/RealVNC viewer
			if target.Password != "" {
				// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º
				passFile := "/tmp/vncpasswd"
				if err := os.WriteFile(passFile, []byte(target.Password), 0600); err != nil {
					return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª—è: %v", err)
				}
				defer os.Remove(passFile)

				cmd = exec.Command("vncviewer",
					fmt.Sprintf("%s:%d", target.IP, port),
					"-passwd", passFile)
			} else {
				cmd = exec.Command("vncviewer", fmt.Sprintf("%s:%d", target.IP, port))
			}

		} else if commandExists("xtightvncviewer") {
			// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π VNC viewer
			cmd = exec.Command("xtightvncviewer", fmt.Sprintf("%s:%d", target.IP, port))

		} else {
			return fmt.Errorf("‚ùå VNC –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install remmina vinagre tigervnc-viewer")
		}

	case "darwin":
		// macOS –≤–µ—Ä—Å–∏—è
		if commandExists("open") {
			vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
			cmd = exec.Command("open", vncUrl)
		} else {
			return fmt.Errorf("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Screen Sharing –∏–ª–∏ VNC –∫–ª–∏–µ–Ω—Ç –¥–ª—è macOS")
		}

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º VNC –∫–ª–∏–µ–Ω—Ç...\n")

	if useRemmina {
		fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Remmina (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π)")
	} else {
		fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %s\n", cmd.Path)
	}

	if err := cmd.Start(); err != nil {
		// –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç...\n")
		return startAlternativeVNC(target, port)
	}

	fmt.Println("‚úÖ VNC –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

	if useRemmina {
		// Remmina –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
		return cmd.Wait()
	}

	// –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	return cmd.Wait()
}

func startAlternativeVNC(target models.Target, port int) error {
	fmt.Println("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ VNC –∫–ª–∏–µ–Ω—Ç—ã...")

	// –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ remmina –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
	if commandExists("remmina") {
		vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
		cmd := exec.Command("remmina", "-c", vncUrl)
		if err := cmd.Start(); err == nil {
			fmt.Println("‚úÖ Remmina –∑–∞–ø—É—â–µ–Ω (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è)")
			return nil
		}
	}

	// –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π vncviewer
	if commandExists("vncviewer") {
		cmd := exec.Command("vncviewer", fmt.Sprintf("%s:%d", target.IP, port))
		if err := cmd.Start(); err == nil {
			fmt.Println("‚úÖ VNCViewer –∑–∞–ø—É—â–µ–Ω")
			return nil
		}
	}

	return fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω VNC –∫–ª–∏–µ–Ω—Ç")
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
func commandExists(cmd string) bool {
	_, err := exec.LookPath(cmd)
	return err == nil
}
