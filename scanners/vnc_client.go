package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
)

func ConnectVNC(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VNC %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è - TigerVNC –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
		if CommandExists("vncviewer") {
			cmd = exec.Command("vncviewer",
				fmt.Sprintf("%s:%d", target.IP, port),
				"-password", target.Password)
		} else {
			return fmt.Errorf("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TigerVNC –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RDP")
		}

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ TigerVNC
		if CommandExists("vncviewer") {
			fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º TigerVNC viewer...")

			if target.Password != "" {
				// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
				passFile := "/tmp/vncpasswd_tiger"
				if err := os.WriteFile(passFile, []byte(target.Password), 0600); err != nil {
					return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª—è: %v", err)
				}
				defer os.Remove(passFile)

				// TigerVNC —Å –ø–∞—Ä–æ–ª–µ–º
				cmd = exec.Command("vncviewer",
					fmt.Sprintf("%s:%d", target.IP, port),
					"-passwd", passFile,
					"-quality", "9", // –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
					"-compresslevel", "6", // –°–∂–∞—Ç–∏–µ
					"-encodings", "tight") // –ö–æ–¥–∏—Ä–æ–≤–∫–∞
			} else {
				// TigerVNC –±–µ–∑ –ø–∞—Ä–æ–ª—è
				cmd = exec.Command("vncviewer",
					fmt.Sprintf("%s:%d", target.IP, port),
					"-quality", "9",
					"-compresslevel", "6",
					"-encodings", "tight")
			}

		} else {
			return fmt.Errorf("‚ùå TigerVNC –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S tigervnc")
		}

	case "darwin":
		// macOS –≤–µ—Ä—Å–∏—è - Screen Sharing –∏–ª–∏ TigerVNC
		if CommandExists("open") {
			// –ü—Ä–æ–±—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Screen Sharing
			vncUrl := fmt.Sprintf("vnc://%s:%d", target.IP, port)
			cmd = exec.Command("open", vncUrl)
		} else if CommandExists("vncviewer") {
			// TigerVNC –¥–ª—è macOS
			cmd = exec.Command("vncviewer",
				fmt.Sprintf("%s:%d", target.IP, port),
				"-password", target.Password)
		} else {
			return fmt.Errorf("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Screen Sharing –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TigerVNC")
		}

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º TigerVNC...\n")
	fmt.Printf("üîó –ê–¥—Ä–µ—Å: %s:%d\n", target.IP, port)
	if target.Password != "" {
		fmt.Printf("üîë –ü–∞—Ä–æ–ª—å: %s\n", "***")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TigerVNC: %v\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–∞—Ä–æ–ª—å", err)
	}

	fmt.Println("‚úÖ TigerVNC —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// –ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞)
func ConnectVNCQuick(target models.Target, port int) error {
	fmt.Printf("üëÅÔ∏è –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VNC %s:%d...\n", target.IP, port)

	if !CommandExists("vncviewer") {
		return fmt.Errorf("‚ùå TigerVNC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	cmd := exec.Command("vncviewer", fmt.Sprintf("%s:%d", target.IP, port))
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	fmt.Println("üí° –ó–∞–ø—É—Å–∫–∞–µ–º TigerVNC (–±–µ–∑ –ø–∞—Ä–æ–ª—è)...")
	return cmd.Run()
}
