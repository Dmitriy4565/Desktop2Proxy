package scanners

import (
	"bufio"
	"desktop2proxy/models"
	"fmt"
	"io"
	"net"
	"os"
	"os/exec"
	"strconv"
	"time"
)

func ConnectTelnet(target models.Target, port int) error {
	fmt.Printf("üìü –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telnet %s:%d...\n", target.IP, port)

	// –î–ª—è Arch Linux –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω–∏ telnet
	if CommandExists("telnet") || CommandExists("telnet.netkit") {
		return startSystemTelnet(target, port)
	}

	// –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–∞—à–∞ Go —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
	return startGoTelnet(target, port)
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
func startSystemTelnet(target models.Target, port int) error {
	fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π telnet –∫–ª–∏–µ–Ω—Ç...")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Arch Linux
	telnetCmd := "telnet"
	if !CommandExists("telnet") && CommandExists("telnet.netkit") {
		telnetCmd = "telnet.netkit"
	}

	cmd := exec.Command(telnetCmd, target.IP, strconv.Itoa(port))

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	fmt.Println("‚úÖ Telnet —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞: Ctrl+] –∑–∞—Ç–µ–º 'quit'")

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ telnet: %v", err)
	}

	return nil
}

// Go —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è telnet (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
func startGoTelnet(target models.Target, port int) error {
	fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π telnet –∫–ª–∏–µ–Ω—Ç...")

	conn, err := net.DialTimeout("tcp", net.JoinHostPort(target.IP, strconv.Itoa(port)), 10*time.Second)
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close()

	fmt.Println("‚úÖ Telnet –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
	fmt.Println("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit'")

	// –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
	done := make(chan bool)

	// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	go func() {
		buffer := make([]byte, 4096)
		for {
			n, err := conn.Read(buffer)
			if err != nil {
				if err != io.EOF {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v\n", err)
				}
				done <- true
				return
			}
			if n > 0 {
				fmt.Print(string(buffer[:n]))
			}
		}
	}()

	// –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
	go func() {
		scanner := bufio.NewScanner(os.Stdin)
		for scanner.Scan() {
			text := scanner.Text()

			// –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
			if text == "exit" || text == "quit" || text == "logout" {
				conn.Write([]byte("exit\r\n"))
				done <- true
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å \r\n
			_, err := conn.Write([]byte(text + "\r\n"))
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v\n", err)
				done <- true
				return
			}
		}
	}()

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-done
	fmt.Println("üëã Telnet —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}
