package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"io"
	"net"
	"os"
	"strconv"

	"golang.org/x/crypto/ssh"
	"golang.org/x/term"
)

func LaunchSSHSession(target models.Target, port int) error {
	config := &ssh.ClientConfig{
		User: target.Username,
		Auth: []ssh.AuthMethod{
			ssh.Password(target.Password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	fmt.Printf("üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ %s@%s:%d...\n", target.Username, target.IP, port)

	client, err := ssh.Dial("tcp", net.JoinHostPort(target.IP, strconv.Itoa(port)), config)
	if err != nil {
		return fmt.Errorf("‚ùå SSH –æ—à–∏–±–∫–∞: %v", err)
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: %v", err)
	}
	defer session.Close()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
	fd := int(os.Stdin.Fd())
	oldState, err := term.MakeRaw(fd)
	if err != nil {
		return err
	}
	defer term.Restore(fd, oldState)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	w, h, err := term.GetSize(fd)
	if err != nil {
		return err
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PTY
	modes := ssh.TerminalModes{
		ssh.ECHO:          1,
		ssh.TTY_OP_ISPEED: 14400,
		ssh.TTY_OP_OSPEED: 14400,
	}

	if err := session.RequestPty("xterm-256color", h, w, modes); err != nil {
		return err
	}

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥/–≤—ã–≤–æ–¥
	session.Stdout = os.Stdout
	session.Stderr = os.Stderr
	session.Stdin = os.Stdin

	fmt.Println("‚úÖ SSH —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.")
	fmt.Println("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+D")

	// –ó–∞–ø—É—Å–∫–∞–µ–º shell
	if err := session.Shell(); err != nil {
		return err
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	if err := session.Wait(); err != nil {
		if err != io.EOF {
			return err
		}
	}

	return nil
}
