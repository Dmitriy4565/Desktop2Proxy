package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
)

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
func CommandExists(cmd string) bool {
	_, err := exec.LookPath(cmd)
	return err == nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ RDP –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è Ubuntu)
func findRDPClient() string {
	// –ù–∞ Ubuntu –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: remmina -> freerdp -> rdesktop
	rdpClients := []string{
		"remmina",  // –õ—É—á—à–∏–π - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CredSSP
		"xfreerdp", // FreeRDP (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
		"freerdp",  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
		"rdesktop", // –ë–∞–∑–æ–≤—ã–π (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)
		"/usr/bin/remmina",
		"/usr/bin/xfreerdp",
		"/usr/bin/rdesktop",
	}

	for _, client := range rdpClients {
		if CommandExists(client) {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω RDP –∫–ª–∏–µ–Ω—Ç: %s\n", client)
			return client
		}
	}
	return ""
}

func ConnectRDP(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π mstsc
		rdpContent := fmt.Sprintf(`
screen mode id:i:2
desktopwidth:i:1024
desktopheight:i:768
full address:s:%s:%d
username:s:%s
password:s:%s
`, target.IP, port, target.Username, target.Password)

		tmpFile := "auto_connect.rdp"
		if err := os.WriteFile(tmpFile, []byte(rdpContent), 0644); err != nil {
			return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RDP —Ñ–∞–π–ª–∞: %v", err)
		}
		defer os.Remove(tmpFile)

		cmd = exec.Command("mstsc", tmpFile)

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ RDP –∫–ª–∏–µ–Ω—Ç—ã
		rdpClient := findRDPClient()
		if rdpClient == "" {
			return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install remmina remmina-plugin-rdp")
		}

		fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º %s...\n", rdpClient)

		// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
		if strings.Contains(rdpClient, "remmina") {
			// Remmina –¥–ª—è Ubuntu - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
			cmd = exec.Command("remmina",
				"-c", fmt.Sprintf("rdp://%s:%d", target.IP, port),
				"-u", target.Username,
				"-p", target.Password)

		} else if strings.Contains(rdpClient, "freerdp") {
			// FreeRDP –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Ubuntu
			args := []string{
				"/v:" + target.IP + ":" + strconv.Itoa(port),
				"/u:" + target.Username,
				"/p:" + target.Password,
				"/cert-ignore",
				"+compression",
				"/gdi:sw",
			}
			cmd = exec.Command(rdpClient, args...)

		} else if strings.Contains(rdpClient, "rdesktop") {
			fmt.Println("üîê RDesktop - –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ")
			fmt.Println("üí° –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç: 1. 'yes' –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ 2. –ü–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∏")

			cmd = exec.Command(rdpClient,
				target.IP+":"+strconv.Itoa(port),
				"-u", target.Username,
				"-p", target.Password,
				"-g", "1024x768",
				"-a", "16",
				"-k", "en-us")
		}

	case "darwin":
		return fmt.Errorf("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Microsoft Remote Desktop –¥–ª—è macOS")

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	if cmd == nil {
		return fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É RDP")
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º RDP –∫–ª–∏–µ–Ω—Ç...\n")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ RDP: %v", err)
	}

	fmt.Println("‚úÖ RDP —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}
