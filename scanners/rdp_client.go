package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
)

func ConnectRDP(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π mstsc
		rdpContent := fmt.Sprintf(`
screen mode id:i:2
desktopwidth:i:1024
desktopheight:i:768
full address:s:%s:%d
username:s:%s
password:s:%s
`, target.IP, port, target.Username, target.Password)

		tmpFile := "auto_connect.rdp"
		if err := os.WriteFile(tmpFile, []byte(rdpContent), 0644); err != nil {
			return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RDP —Ñ–∞–π–ª–∞: %v", err)
		}
		defer os.Remove(tmpFile)

		cmd = exec.Command("mstsc", tmpFile)

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ RDP –∫–ª–∏–µ–Ω—Ç—ã
		rdpClient := findRDPClient()
		if rdpClient == "" {
			return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S freerdp –∏–ª–∏ sudo pacman -S rdesktop")
		}

		fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º %s...\n", rdpClient)

		// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
		if strings.Contains(rdpClient, "freerdp") {
			// FreeRDP –∞—Ä–≥—É–º–µ–Ω—Ç—ã
			args := []string{
				"/v:" + target.IP + ":" + strconv.Itoa(port),
				"/u:" + target.Username,
				"/p:" + target.Password,
				"/cert-ignore",
				"+compression",
				"/gfx-h264",
				"/dynamic-resolution",
			}

			if strings.Contains(rdpClient, "3") {
				args = append(args, "/gfx:RFX")
			}

			cmd = exec.Command(rdpClient, args...)

		} else if strings.Contains(rdpClient, "rdesktop") {
			// rdesktop –∞—Ä–≥—É–º–µ–Ω—Ç—ã
			cmd = exec.Command(rdpClient,
				target.IP+":"+strconv.Itoa(port),
				"-u", target.Username,
				"-p", target.Password,
				"-g", "1024x768",
				"-a", "16",
				"-k", "en-us",
				"-z",      // –°–∂–∞—Ç–∏–µ
				"-x", "l", // LAN –∫–∞—á–µ—Å—Ç–≤–æ (–ª—É—á—à–µ —á–µ–º 'm')
				"-P", // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏—Ç–º–∞–ø–æ–≤
				"-D", // –ë–µ–∑ decorations
				"-N", // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è NumLock
				"-C") // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å private colormap
		}

	case "darwin":
		return fmt.Errorf("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Microsoft Remote Desktop –¥–ª—è macOS")

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	if cmd == nil {
		return fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É RDP")
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º RDP –∫–ª–∏–µ–Ω—Ç...\n")
	fmt.Printf("üîë –õ–æ–≥–∏–Ω: %s, –ü–∞—Ä–æ–ª—å: %s\n", target.Username, "***")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RDP: %v\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", err)
	}

	fmt.Println("‚úÖ RDP —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ RDP –∫–ª–∏–µ–Ω—Ç–∞
func findRDPClient() string {
	// –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö RDP –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É)
	rdpClients := []string{
		// –°—Ç–∞–≤–∏–º rdesktop –Ω–∞ –ü–ï–†–í–û–ï –º–µ—Å—Ç–æ - –æ–Ω —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!
		"rdesktop",

		// –ü–æ—Ç–æ–º —É–∂–µ –ø—Ä–æ–±—É–µ–º FreeRDP –≤–∞—Ä–∏–∞–Ω—Ç—ã
		"xfreerdp", "freerdp", "wlfreerdp",
		"xfreerdp3", "wlfreerdp3", "freerdp3",
		"/usr/bin/xfreerdp3", "/usr/bin/wlfreerdp3", "/usr/bin/freerdp3",
	}

	for _, client := range rdpClients {
		if CommandExists(client) {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π RDP –∫–ª–∏–µ–Ω—Ç: %s\n", client)
			return client
		}
	}
	return ""
}
