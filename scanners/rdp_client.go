package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
)

func LaunchRDPConnection(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// –°–æ–∑–¥–∞–µ–º RDP —Ñ–∞–π–ª —Å credentials
		rdpContent := fmt.Sprintf(`
screen mode id:i:2
use multimon:i:0
desktopwidth:i:1024
desktopheight:i:768
session bpp:i:32
winposstr:s:0,1,0,0,800,600
full address:s:%s:%d
username:s:%s
password:s:%s
authentication level:i:2
`, target.IP, port, target.Username, target.Password)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
		tmpFile := "auto_connect.rdp"
		if err := os.WriteFile(tmpFile, []byte(rdpContent), 0644); err != nil {
			return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RDP —Ñ–∞–π–ª–∞: %v", err)
		}
		defer os.Remove(tmpFile)

		cmd = exec.Command("mstsc", tmpFile)
		fmt.Printf("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–Ω: %s, –ø–∞—Ä–æ–ª—å: ***\n", target.Username)

	case "darwin", "linux":
		return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è %s –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", runtime.GOOS)
	}

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Remote Desktop...")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RDP: %v", err)
	}

	return nil
}
