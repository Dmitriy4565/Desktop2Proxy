package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"strconv"
)

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ RDP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func findSimpleRDPClient() string {
	// –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º rdesktop
	rdpClients := []string{
		"rdesktop",
		"/usr/bin/rdesktop",
	}

	for _, client := range rdpClients {
		if CommandExists(client) {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω RDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: %s\n", client)
			return client
		}
	}
	return ""
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ RDP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func find2FARDPClient() string {
	// –î–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º xfreerdp
	rdpClients := []string{
		"xfreerdp",
		"/usr/bin/xfreerdp",
	}

	for _, client := range rdpClients {
		if CommandExists(client) {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω RDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∏: %s\n", client)
			return client
		}
	}
	return ""
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
func ConnectRDP(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	rdpClient := findSimpleRDPClient()
	if rdpClient == "" {
		return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S rdesktop")
	}

	fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º %s –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n", rdpClient)
	fmt.Println("üîê –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å–µ—Ä–≤–µ—Ä–∞")

	cmd := exec.Command(rdpClient,
		target.IP+":"+strconv.Itoa(port),
		"-u", target.Username,
		"-p", target.Password,
		"-g", "1024x768",
		"-a", "16",
		"-k", "en-us",
		"-z") // –°–∂–∞—Ç–∏–µ

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º...\n")
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ RDP: %v", err)
	}

	fmt.Println("‚úÖ RDP —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–æ–π
func ConnectRDPWith2FA(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–æ–π %s:%d...\n", target.IP, port)

	rdpClient := find2FARDPClient()
	if rdpClient == "" {
		return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S freerdp2")
	}

	fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º %s –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n", rdpClient)
	fmt.Println("üîê FreeRDP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç CredSSP/NLA")

	// FreeRDP –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è CredSSP
	args := []string{
		"/v:" + target.IP + ":" + strconv.Itoa(port),
		"/u:" + target.Username,
		"/p:" + target.Password,
		"/cert-ignore", // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
		"/sec:nla",     // Network Level Authentication (CredSSP)
		"+compression", // –°–∂–∞—Ç–∏–µ
		"/gdi:sw",      // Software rendering
		"/gfx",         // Graphics pipeline
		"/rfx",         // RemoteFX
		"/floatbar",    // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	}

	cmd := exec.Command(rdpClient, args...)

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º...\n")
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ RDP —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–æ–π: %v", err)
	}

	fmt.Println("‚úÖ RDP —Å–µ—Å—Å–∏—è —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}
