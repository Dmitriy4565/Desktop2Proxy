package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
)

func LaunchRDPConnection(target models.Target, port int) error {
	fmt.Printf("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RDP %s:%d...\n", target.IP, port)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		// Windows –≤–µ—Ä—Å–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
		rdpContent := fmt.Sprintf(`
screen mode id:i:2
use multimon:i:0
desktopwidth:i:1024
desktopheight:i:768
session bpp:i:32
winposstr:s:0,1,0,0,800,600
full address:s:%s:%d
username:s:%s
password:s:%s
authentication level:i:2
`, target.IP, port, target.Username, target.Password)

		tmpFile := "auto_connect.rdp"
		if err := os.WriteFile(tmpFile, []byte(rdpContent), 0644); err != nil {
			return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RDP —Ñ–∞–π–ª–∞: %v", err)
		}
		defer os.Remove(tmpFile)

		cmd = exec.Command("mstsc", tmpFile)

	case "linux":
		// LINUX –í–ï–†–°–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º Remmina –∏–ª–∏ FreeRDP
		if commandExists("remmina") {
			// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Remmina
			profileContent := fmt.Sprintf(`[remmina]
name=AutoRDP_%s
protocol=RDP
server=%s
port=%d
username=%s
password=%s
colordepth=32
resolution=1024x768
`, target.IP, target.IP, port, target.Username, target.Password)

			profileFile := "/tmp/remmina_auto.remmina"
			if err := os.WriteFile(profileFile, []byte(profileContent), 0644); err != nil {
				return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è Remmina: %v", err)
			}
			defer os.Remove(profileFile)

			cmd = exec.Command("remmina", "-c", profileFile)

		} else if commandExists("xfreerdp") {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º FreeRDP
			cmd = exec.Command("xfreerdp",
				"/v:"+target.IP+":"+strconv.Itoa(port),
				"/u:"+target.Username,
				"/p:"+target.Password,
				"/gdi:sw",
				"/compression",
				"/rfx")

		} else if commandExists("rdesktop") {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º rdesktop (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
			cmd = exec.Command("rdesktop",
				target.IP+":"+strconv.Itoa(port),
				"-u", target.Username,
				"-p", target.Password,
				"-g", "1024x768")

		} else {
			return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install remmina")
		}

	case "darwin":
		// macOS –≤–µ—Ä—Å–∏—è
		return fmt.Errorf("‚ùå RDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è macOS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Microsoft Remote Desktop")

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º RDP –∫–ª–∏–µ–Ω—Ç...")
	if err := cmd.Start(); err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RDP: %v\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ RDP –∫–ª–∏–µ–Ω—Ç", err)
	}

	fmt.Println("‚úÖ RDP –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
	return cmd.Wait()
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
func commandExists(cmd string) bool {
	_, err := exec.LookPath(cmd)
	return err == nil
}
