package scanners

import (
	"desktop2proxy/models"
	"fmt"
	"os/exec"
	"runtime"
)

func OpenBrowser(target models.Target, result models.ProbeResult) error {
	scheme := "http"
	if result.Protocol == "HTTPS" {
		scheme = "https"
	}

	url := fmt.Sprintf("%s://%s:%d", scheme, target.IP, result.Port)

	fmt.Printf("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º: %s\n", url)
	if target.Username != "" {
		fmt.Printf("üîë –õ–æ–≥–∏–Ω: %s, –ü–∞—Ä–æ–ª—å: %s\n", target.Username, target.Password)
	}

	var cmd *exec.Cmd
	var browserName string

	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("cmd", "/c", "start", url)
		browserName = "–±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

	case "darwin":
		cmd = exec.Command("open", url)
		browserName = "Safari/–±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

	case "linux":
		// LINUX: –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
		if commandExists("xdg-open") {
			cmd = exec.Command("xdg-open", url)
			browserName = "–±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (xdg-open)"
		} else if commandExists("firefox") {
			cmd = exec.Command("firefox", url)
			browserName = "Firefox"
		} else if commandExists("chromium-browser") {
			cmd = exec.Command("chromium-browser", url)
			browserName = "Chromium"
		} else if commandExists("google-chrome") {
			cmd = exec.Command("google-chrome", url)
			browserName = "Google Chrome"
		} else if commandExists("opera") {
			cmd = exec.Command("opera", url)
			browserName = "Opera"
		} else {
			return fmt.Errorf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install firefox")
		}

	default:
		return fmt.Errorf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", runtime.GOOS)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º %s...\n", browserName)

	if err := cmd.Start(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: %v\n", err)
		fmt.Printf("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: %s\n", url)

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Linux
		if runtime.GOOS == "linux" {
			fmt.Println("üí° –ù–∞ Linux —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
			fmt.Println("   - –ë—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (sudo apt install firefox)")
			fmt.Println("   - X11 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–¥–ª—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞)")
			fmt.Println("   - –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DISPLAY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
		}

		return err
	}

	fmt.Println("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ª—é–±–æ–π URL
func OpenURL(url string) error {
	fmt.Printf("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º URL: %s\n", url)

	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "linux":
		if commandExists("xdg-open") {
			cmd = exec.Command("xdg-open", url)
		} else if commandExists("firefox") {
			cmd = exec.Command("firefox", url)
		} else {
			return fmt.Errorf("–±—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
	case "windows":
		cmd = exec.Command("cmd", "/c", "start", url)
	case "darwin":
		cmd = exec.Command("open", url)
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°")
	}

	return cmd.Start()
}
